# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: client.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='client.proto',
  package='looprpc',
  syntax='proto3',
  serialized_pb=_b('\n\x0c\x63lient.proto\x12\x07looprpc\x1a\x1cgoogle/api/annotations.proto\"\xc8\x01\n\x0eLoopOutRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x0c\n\x04\x64\x65st\x18\x02 \x01(\t\x12\x1c\n\x14max_swap_routing_fee\x18\x03 \x01(\x03\x12\x1e\n\x16max_prepay_routing_fee\x18\x04 \x01(\x03\x12\x14\n\x0cmax_swap_fee\x18\x05 \x01(\x03\x12\x16\n\x0emax_prepay_amt\x18\x06 \x01(\x03\x12\x15\n\rmax_miner_fee\x18\x07 \x01(\x03\x12\x18\n\x10loop_out_channel\x18\x08 \x01(\x04\"\x1a\n\x0cSwapResponse\x12\n\n\x02id\x18\x01 \x01(\t\"\x10\n\x0eMonitorRequest\"\xb2\x01\n\nSwapStatus\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\n\n\x02id\x18\x02 \x01(\t\x12\x1f\n\x04type\x18\x03 \x01(\x0e\x32\x11.looprpc.SwapType\x12!\n\x05state\x18\x04 \x01(\x0e\x32\x12.looprpc.SwapState\x12\x17\n\x0finitiation_time\x18\x05 \x01(\x03\x12\x18\n\x10last_update_time\x18\x06 \x01(\x03\x12\x14\n\x0chtlc_address\x18\x07 \x01(\t\"\x0e\n\x0cTermsRequest\"\xc4\x01\n\rTermsResponse\x12\x19\n\x11swap_payment_dest\x18\x01 \x01(\t\x12\x15\n\rswap_fee_base\x18\x02 \x01(\x03\x12\x15\n\rswap_fee_rate\x18\x03 \x01(\x03\x12\x12\n\nprepay_amt\x18\x04 \x01(\x03\x12\x17\n\x0fmin_swap_amount\x18\x05 \x01(\x03\x12\x17\n\x0fmax_swap_amount\x18\x06 \x01(\x03\x12\x12\n\ncltv_delta\x18\x07 \x01(\x05\x12\x10\n\x08max_cltv\x18\x08 \x01(\x05\"\x1b\n\x0cQuoteRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\"H\n\rQuoteResponse\x12\x10\n\x08swap_fee\x18\x01 \x01(\x03\x12\x12\n\nprepay_amt\x18\x02 \x01(\x03\x12\x11\n\tminer_fee\x18\x03 \x01(\x03*\x18\n\x08SwapType\x12\x0c\n\x08LOOP_OUT\x10\x00*J\n\tSwapState\x12\r\n\tINITIATED\x10\x00\x12\x15\n\x11PREIMAGE_REVEALED\x10\x01\x12\x0b\n\x07SUCCESS\x10\x03\x12\n\n\x06\x46\x41ILED\x10\x04\x32\xd7\x02\n\nSwapClient\x12R\n\x07LoopOut\x12\x17.looprpc.LoopOutRequest\x1a\x15.looprpc.SwapResponse\"\x17\x82\xd3\xe4\x93\x02\x11\"\x0c/v1/loop/out:\x01*\x12\x39\n\x07Monitor\x12\x17.looprpc.MonitorRequest\x1a\x13.looprpc.SwapStatus0\x01\x12Y\n\x0cLoopOutTerms\x12\x15.looprpc.TermsRequest\x1a\x16.looprpc.TermsResponse\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/v1/loop/out/terms\x12_\n\x0cLoopOutQuote\x12\x15.looprpc.QuoteRequest\x1a\x16.looprpc.QuoteResponse\" \x82\xd3\xe4\x93\x02\x1a\x12\x18/v1/loop/out/quote/{amt}b\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,])

_SWAPTYPE = _descriptor.EnumDescriptor(
  name='SwapType',
  full_name='looprpc.SwapType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LOOP_OUT', index=0, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=803,
  serialized_end=827,
)
_sym_db.RegisterEnumDescriptor(_SWAPTYPE)

SwapType = enum_type_wrapper.EnumTypeWrapper(_SWAPTYPE)
_SWAPSTATE = _descriptor.EnumDescriptor(
  name='SwapState',
  full_name='looprpc.SwapState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INITIATED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PREIMAGE_REVEALED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=2, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FAILED', index=3, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=829,
  serialized_end=903,
)
_sym_db.RegisterEnumDescriptor(_SWAPSTATE)

SwapState = enum_type_wrapper.EnumTypeWrapper(_SWAPSTATE)
LOOP_OUT = 0
INITIATED = 0
PREIMAGE_REVEALED = 1
SUCCESS = 3
FAILED = 4



_LOOPOUTREQUEST = _descriptor.Descriptor(
  name='LoopOutRequest',
  full_name='looprpc.LoopOutRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='amt', full_name='looprpc.LoopOutRequest.amt', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dest', full_name='looprpc.LoopOutRequest.dest', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_swap_routing_fee', full_name='looprpc.LoopOutRequest.max_swap_routing_fee', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_prepay_routing_fee', full_name='looprpc.LoopOutRequest.max_prepay_routing_fee', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_swap_fee', full_name='looprpc.LoopOutRequest.max_swap_fee', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_prepay_amt', full_name='looprpc.LoopOutRequest.max_prepay_amt', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_miner_fee', full_name='looprpc.LoopOutRequest.max_miner_fee', index=6,
      number=7, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='loop_out_channel', full_name='looprpc.LoopOutRequest.loop_out_channel', index=7,
      number=8, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=56,
  serialized_end=256,
)


_SWAPRESPONSE = _descriptor.Descriptor(
  name='SwapResponse',
  full_name='looprpc.SwapResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='looprpc.SwapResponse.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=258,
  serialized_end=284,
)


_MONITORREQUEST = _descriptor.Descriptor(
  name='MonitorRequest',
  full_name='looprpc.MonitorRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=286,
  serialized_end=302,
)


_SWAPSTATUS = _descriptor.Descriptor(
  name='SwapStatus',
  full_name='looprpc.SwapStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='amt', full_name='looprpc.SwapStatus.amt', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='looprpc.SwapStatus.id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='looprpc.SwapStatus.type', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='looprpc.SwapStatus.state', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='initiation_time', full_name='looprpc.SwapStatus.initiation_time', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_update_time', full_name='looprpc.SwapStatus.last_update_time', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='htlc_address', full_name='looprpc.SwapStatus.htlc_address', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=305,
  serialized_end=483,
)


_TERMSREQUEST = _descriptor.Descriptor(
  name='TermsRequest',
  full_name='looprpc.TermsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=485,
  serialized_end=499,
)


_TERMSRESPONSE = _descriptor.Descriptor(
  name='TermsResponse',
  full_name='looprpc.TermsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='swap_payment_dest', full_name='looprpc.TermsResponse.swap_payment_dest', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='swap_fee_base', full_name='looprpc.TermsResponse.swap_fee_base', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='swap_fee_rate', full_name='looprpc.TermsResponse.swap_fee_rate', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prepay_amt', full_name='looprpc.TermsResponse.prepay_amt', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_swap_amount', full_name='looprpc.TermsResponse.min_swap_amount', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_swap_amount', full_name='looprpc.TermsResponse.max_swap_amount', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cltv_delta', full_name='looprpc.TermsResponse.cltv_delta', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_cltv', full_name='looprpc.TermsResponse.max_cltv', index=7,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=502,
  serialized_end=698,
)


_QUOTEREQUEST = _descriptor.Descriptor(
  name='QuoteRequest',
  full_name='looprpc.QuoteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='amt', full_name='looprpc.QuoteRequest.amt', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=700,
  serialized_end=727,
)


_QUOTERESPONSE = _descriptor.Descriptor(
  name='QuoteResponse',
  full_name='looprpc.QuoteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='swap_fee', full_name='looprpc.QuoteResponse.swap_fee', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prepay_amt', full_name='looprpc.QuoteResponse.prepay_amt', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='miner_fee', full_name='looprpc.QuoteResponse.miner_fee', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=729,
  serialized_end=801,
)

_SWAPSTATUS.fields_by_name['type'].enum_type = _SWAPTYPE
_SWAPSTATUS.fields_by_name['state'].enum_type = _SWAPSTATE
DESCRIPTOR.message_types_by_name['LoopOutRequest'] = _LOOPOUTREQUEST
DESCRIPTOR.message_types_by_name['SwapResponse'] = _SWAPRESPONSE
DESCRIPTOR.message_types_by_name['MonitorRequest'] = _MONITORREQUEST
DESCRIPTOR.message_types_by_name['SwapStatus'] = _SWAPSTATUS
DESCRIPTOR.message_types_by_name['TermsRequest'] = _TERMSREQUEST
DESCRIPTOR.message_types_by_name['TermsResponse'] = _TERMSRESPONSE
DESCRIPTOR.message_types_by_name['QuoteRequest'] = _QUOTEREQUEST
DESCRIPTOR.message_types_by_name['QuoteResponse'] = _QUOTERESPONSE
DESCRIPTOR.enum_types_by_name['SwapType'] = _SWAPTYPE
DESCRIPTOR.enum_types_by_name['SwapState'] = _SWAPSTATE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LoopOutRequest = _reflection.GeneratedProtocolMessageType('LoopOutRequest', (_message.Message,), dict(
  DESCRIPTOR = _LOOPOUTREQUEST,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LoopOutRequest)
  ))
_sym_db.RegisterMessage(LoopOutRequest)

SwapResponse = _reflection.GeneratedProtocolMessageType('SwapResponse', (_message.Message,), dict(
  DESCRIPTOR = _SWAPRESPONSE,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SwapResponse)
  ))
_sym_db.RegisterMessage(SwapResponse)

MonitorRequest = _reflection.GeneratedProtocolMessageType('MonitorRequest', (_message.Message,), dict(
  DESCRIPTOR = _MONITORREQUEST,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.MonitorRequest)
  ))
_sym_db.RegisterMessage(MonitorRequest)

SwapStatus = _reflection.GeneratedProtocolMessageType('SwapStatus', (_message.Message,), dict(
  DESCRIPTOR = _SWAPSTATUS,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SwapStatus)
  ))
_sym_db.RegisterMessage(SwapStatus)

TermsRequest = _reflection.GeneratedProtocolMessageType('TermsRequest', (_message.Message,), dict(
  DESCRIPTOR = _TERMSREQUEST,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.TermsRequest)
  ))
_sym_db.RegisterMessage(TermsRequest)

TermsResponse = _reflection.GeneratedProtocolMessageType('TermsResponse', (_message.Message,), dict(
  DESCRIPTOR = _TERMSRESPONSE,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.TermsResponse)
  ))
_sym_db.RegisterMessage(TermsResponse)

QuoteRequest = _reflection.GeneratedProtocolMessageType('QuoteRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUOTEREQUEST,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.QuoteRequest)
  ))
_sym_db.RegisterMessage(QuoteRequest)

QuoteResponse = _reflection.GeneratedProtocolMessageType('QuoteResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUOTERESPONSE,
  __module__ = 'client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.QuoteResponse)
  ))
_sym_db.RegisterMessage(QuoteResponse)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class SwapClientStub(object):
    """*
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.LoopOut = channel.unary_unary(
          '/looprpc.SwapClient/LoopOut',
          request_serializer=LoopOutRequest.SerializeToString,
          response_deserializer=SwapResponse.FromString,
          )
      self.Monitor = channel.unary_stream(
          '/looprpc.SwapClient/Monitor',
          request_serializer=MonitorRequest.SerializeToString,
          response_deserializer=SwapStatus.FromString,
          )
      self.LoopOutTerms = channel.unary_unary(
          '/looprpc.SwapClient/LoopOutTerms',
          request_serializer=TermsRequest.SerializeToString,
          response_deserializer=TermsResponse.FromString,
          )
      self.LoopOutQuote = channel.unary_unary(
          '/looprpc.SwapClient/LoopOutQuote',
          request_serializer=QuoteRequest.SerializeToString,
          response_deserializer=QuoteResponse.FromString,
          )


  class SwapClientServicer(object):
    """*
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def LoopOut(self, request, context):
      """* loop: `out`
      LoopOut initiates an loop out swap with the given parameters. The call
      returns after the swap has been set up with the swap server. From that
      point onwards, progress can be tracked via the SwapStatus stream that is
      returned from Monitor().
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Monitor(self, request, context):
      """* loop: `monitor`
      Monitor will return a stream of swap updates for currently active swaps.
      TODO: add MonitorSync version for REST clients.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def LoopOutTerms(self, request, context):
      """* loop: `terms`
      LoopOutTerms returns the terms that the server enforces for a loop out swap.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def LoopOutQuote(self, request, context):
      """* loop: `quote`
      LoopOutQuote returns a quote for a loop out swap with the provided
      parameters.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SwapClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'LoopOut': grpc.unary_unary_rpc_method_handler(
            servicer.LoopOut,
            request_deserializer=LoopOutRequest.FromString,
            response_serializer=SwapResponse.SerializeToString,
        ),
        'Monitor': grpc.unary_stream_rpc_method_handler(
            servicer.Monitor,
            request_deserializer=MonitorRequest.FromString,
            response_serializer=SwapStatus.SerializeToString,
        ),
        'LoopOutTerms': grpc.unary_unary_rpc_method_handler(
            servicer.LoopOutTerms,
            request_deserializer=TermsRequest.FromString,
            response_serializer=TermsResponse.SerializeToString,
        ),
        'LoopOutQuote': grpc.unary_unary_rpc_method_handler(
            servicer.LoopOutQuote,
            request_deserializer=QuoteRequest.FromString,
            response_serializer=QuoteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'looprpc.SwapClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaSwapClientServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """
    def LoopOut(self, request, context):
      """* loop: `out`
      LoopOut initiates an loop out swap with the given parameters. The call
      returns after the swap has been set up with the swap server. From that
      point onwards, progress can be tracked via the SwapStatus stream that is
      returned from Monitor().
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Monitor(self, request, context):
      """* loop: `monitor`
      Monitor will return a stream of swap updates for currently active swaps.
      TODO: add MonitorSync version for REST clients.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def LoopOutTerms(self, request, context):
      """* loop: `terms`
      LoopOutTerms returns the terms that the server enforces for a loop out swap.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def LoopOutQuote(self, request, context):
      """* loop: `quote`
      LoopOutQuote returns a quote for a loop out swap with the provided
      parameters.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSwapClientStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """*
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """
    def LoopOut(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* loop: `out`
      LoopOut initiates an loop out swap with the given parameters. The call
      returns after the swap has been set up with the swap server. From that
      point onwards, progress can be tracked via the SwapStatus stream that is
      returned from Monitor().
      """
      raise NotImplementedError()
    LoopOut.future = None
    def Monitor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* loop: `monitor`
      Monitor will return a stream of swap updates for currently active swaps.
      TODO: add MonitorSync version for REST clients.
      """
      raise NotImplementedError()
    def LoopOutTerms(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* loop: `terms`
      LoopOutTerms returns the terms that the server enforces for a loop out swap.
      """
      raise NotImplementedError()
    LoopOutTerms.future = None
    def LoopOutQuote(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """* loop: `quote`
      LoopOutQuote returns a quote for a loop out swap with the provided
      parameters.
      """
      raise NotImplementedError()
    LoopOutQuote.future = None


  def beta_create_SwapClient_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('looprpc.SwapClient', 'LoopOut'): LoopOutRequest.FromString,
      ('looprpc.SwapClient', 'LoopOutQuote'): QuoteRequest.FromString,
      ('looprpc.SwapClient', 'LoopOutTerms'): TermsRequest.FromString,
      ('looprpc.SwapClient', 'Monitor'): MonitorRequest.FromString,
    }
    response_serializers = {
      ('looprpc.SwapClient', 'LoopOut'): SwapResponse.SerializeToString,
      ('looprpc.SwapClient', 'LoopOutQuote'): QuoteResponse.SerializeToString,
      ('looprpc.SwapClient', 'LoopOutTerms'): TermsResponse.SerializeToString,
      ('looprpc.SwapClient', 'Monitor'): SwapStatus.SerializeToString,
    }
    method_implementations = {
      ('looprpc.SwapClient', 'LoopOut'): face_utilities.unary_unary_inline(servicer.LoopOut),
      ('looprpc.SwapClient', 'LoopOutQuote'): face_utilities.unary_unary_inline(servicer.LoopOutQuote),
      ('looprpc.SwapClient', 'LoopOutTerms'): face_utilities.unary_unary_inline(servicer.LoopOutTerms),
      ('looprpc.SwapClient', 'Monitor'): face_utilities.unary_stream_inline(servicer.Monitor),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_SwapClient_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('looprpc.SwapClient', 'LoopOut'): LoopOutRequest.SerializeToString,
      ('looprpc.SwapClient', 'LoopOutQuote'): QuoteRequest.SerializeToString,
      ('looprpc.SwapClient', 'LoopOutTerms'): TermsRequest.SerializeToString,
      ('looprpc.SwapClient', 'Monitor'): MonitorRequest.SerializeToString,
    }
    response_deserializers = {
      ('looprpc.SwapClient', 'LoopOut'): SwapResponse.FromString,
      ('looprpc.SwapClient', 'LoopOutQuote'): QuoteResponse.FromString,
      ('looprpc.SwapClient', 'LoopOutTerms'): TermsResponse.FromString,
      ('looprpc.SwapClient', 'Monitor'): SwapStatus.FromString,
    }
    cardinalities = {
      'LoopOut': cardinality.Cardinality.UNARY_UNARY,
      'LoopOutQuote': cardinality.Cardinality.UNARY_UNARY,
      'LoopOutTerms': cardinality.Cardinality.UNARY_UNARY,
      'Monitor': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'looprpc.SwapClient', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
